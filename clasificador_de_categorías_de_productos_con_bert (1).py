# -*- coding: utf-8 -*-
"""Clasificador de Categorías de Productos con BERT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3d-wPIdVimC4wBweGKEbLDm9pZzdgmA
"""

# Instalación de librerías necesarias (solo en Colab)
!pip install transformers gradio pandas scikit-learn datasets

# -------------------- 1. IMPORTACIONES --------------------
import os
os.environ["WANDB_DISABLED"] = "true"  # Desactiva WandB para evitar errores

import torch
import pandas as pd
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments, DataCollatorWithPadding
from datasets import Dataset
import gradio as gr

# -------------------- 2. DATOS DE EJEMPLO --------------------
datos = {
    "producto": [
        "Cafetera de cápsulas con apagado automático",
        "Zapatillas deportivas para correr",
        "Set de cuchillos de cocina de acero inoxidable",
        "Tablet Android con pantalla de 10 pulgadas",
        "Difusor de aceites esenciales con luces LED",
        "Aspiradora inalámbrica de mano",
        "Collar con colgante de corazón",
        "Silla ergonómica para oficina",
        "Camiseta de algodón para mujer",
        "Auriculares Bluetooth con micrófono"
    ],
    "categoria": [
        "Electrodomésticos",
        "Moda",
        "Hogar",
        "Tecnología",
        "Bienestar",
        "Hogar",
        "Accesorios",
        "Muebles",
        "Moda",
        "Tecnología"
    ]
}

# Crear dataframe y codificar etiquetas
df = pd.DataFrame(datos)
df['label'] = df['categoria'].astype('category').cat.codes
categorias = df['categoria'].astype('category').cat.categories

# -------------------- 3. TOKENIZACIÓN --------------------
tokenizer = BertTokenizer.from_pretrained("dccuchile/bert-base-spanish-wwm-cased")
dataset = Dataset.from_pandas(df[['producto', 'label']])

def tokenize_function(examples):
    return tokenizer(examples['producto'], truncation=True)

tokenized_dataset = dataset.map(tokenize_function, batched=True)
train_test = tokenized_dataset.train_test_split(test_size=0.2)
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

# -------------------- 4. MODELO Y ENTRENAMIENTO --------------------
model = BertForSequenceClassification.from_pretrained(
    "dccuchile/bert-base-spanish-wwm-cased",
    num_labels=len(categorias)
)

training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir="./logs",
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_test['train'],
    eval_dataset=train_test['test'],
    data_collator=data_collator,
)

trainer.train()

# -------------------- 5. GUARDADO DEL MODELO --------------------
model.save_pretrained('./model')
tokenizer.save_pretrained('./model')

# -------------------- 6. PREDICCIÓN --------------------
def predecir_categoria(producto):
    inputs = tokenizer(producto, return_tensors="pt", truncation=True, padding=True)
    outputs = model(**inputs)
    prediccion = torch.argmax(outputs.logits, dim=1).item()
    return categorias[prediccion]

# Prueba rápida
print(predecir_categoria("Cafetera de cápsulas con apagado automático"))

# -------------------- 7. INTERFAZ GRADIO --------------------
def interfaz_prediccion(texto):
    return predecir_categoria(texto)

demo = gr.Interface(
    fn=interfaz_prediccion,
    inputs=gr.Textbox(lines=2, placeholder="Introduce el nombre del producto..."),
    outputs="text",
    title="Clasificador de Productos por Categoría",
    description="Escribe un producto y te diré a qué categoría pertenece usando BERT (modelo BETO en español)."
)

demo.launch()